#!/usr/bin/env node
/* jshint loopfunc: true */

/* Constant variables {{{ */
var translation_source_file = 'i18n-resources.js';
var translation_source = 'http://openingh.openstreetmap.de/evaluation_tool/js/' + translation_source_file;
/* GitHub only offers HTTPS â€¦ */
var out_dir = './locale/';
/* }}} */

/* Required modules {{{ */
var http = require('http');
var fs   = require('fs');
/* }}} */

/* Download source file {{{ */
if (!fs.existsSync(translation_source_file)) {
    console.log('Loading file ' + translation_source_file);
    var file = fs.createWriteStream(translation_source_file);
    var request = http.get(translation_source, function(response) {
        response.pipe(file);
    }).on('error', function(err) {
         throw("Got error: " + err.message);
    });
}
/* }}} */

/* Dummy class to eval the source file without errors {{{ */
function i18nClass() {
    this.init = function() {};
    this.lang = function() {};
    this.lng  = function() {};
}
moment = i18n = new i18nClass();
/* }}} */

/* If all is good till now, remove all old locale files */
fs.readdirSync(out_dir).forEach(function(filename) {
    fs.unlink(out_dir + '/' + filename, function(err) {
        if (err)
            throw(err);
    });
});
/* }}} */

/* Generate new translations */
function getLocaleLineForItem(key, value) {
    return key + ' = ' + value + '\n';
}

fs.readFile(translation_source_file, 'utf8', function (err, data) {
    if (err) {
        throw(err);
    }

    eval(data);

    for (var lang in resources) {
        var translations_for_lang = resources[lang].translation;
        console.log("Generating translation for: " + lang);

        var out_string = '# This file was generated by a little nodejs script (../gen_tranlations).\n';
        out_string    += '# For translations, see resource file https://github.com/ypid/opening_hours.js/blob/master/js/i18n-resources.js.\n';
        if (lang === 'en') {
            out_string += getLocaleLineForItem('w_opening_hours', 'opening_hours tag');
            out_string += getLocaleLineForItem('w_collection_times', 'collection_times tag');
            out_string += getLocaleLineForItem('w_service_times', 'service_times tag');
            out_string += getLocaleLineForItem('w_lit', 'lit tag');
        }
        if (typeof translations_for_lang.texts === 'object') {
            if (typeof translations_for_lang.texts.filter === 'object') {
                for (var key in translations_for_lang.texts.filter) {
                    var value = translations_for_lang.texts.filter[key];
                    out_string += getLocaleLineForItem('c_filter_' + key, value);
                }
            } else {
                continue; /* Do not write file if something is missing. */
            }
        } else {
            continue; /* Do not write file if something is missing. */
        }

        if (lang === 'en')
            lang = '';
        else
            lang = '_' + lang;

        fs.writeFile(out_dir + 'MessagesBundle' + lang + '.properties', out_string, function(err) {
            if (err)
                throw(err);
        });
    }
});
/* }}} */
